// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gestionabsence.Data;

namespace gestionabsence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("gestionabsence.Models.Enseigne", b =>
                {
                    b.Property<int>("ID_Seance")
                        .HasColumnType("int");

                    b.Property<int>("ID_Prefesseur")
                        .HasColumnType("int");

                    b.Property<int>("ID_Enseigne")
                        .HasColumnType("int");

                    b.HasKey("ID_Seance", "ID_Prefesseur");

                    b.HasIndex("ID_Prefesseur");

                    b.ToTable("Enseigne");
                });

            modelBuilder.Entity("gestionabsence.Models.Etudiant", b =>
                {
                    b.Property<int>("ID_Etudiant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nom_Etudiant")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Prenom_Etudiant")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("filiereID_Filiere")
                        .HasColumnType("int");

                    b.HasKey("ID_Etudiant");

                    b.HasIndex("filiereID_Filiere");

                    b.ToTable("Etudiant");
                });

            modelBuilder.Entity("gestionabsence.Models.Filiere", b =>
                {
                    b.Property<int>("ID_Filiere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ID_Professeur")
                        .HasColumnType("int");

                    b.Property<string>("Nom_Filiere")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ProfesseurID_Prefesseur")
                        .HasColumnType("int");

                    b.HasKey("ID_Filiere");

                    b.HasIndex("ProfesseurID_Prefesseur");

                    b.ToTable("Filiere");
                });

            modelBuilder.Entity("gestionabsence.Models.Matiere", b =>
                {
                    b.Property<int>("ID_Matiere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nom_Matiere")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("SeanceID_Seance")
                        .HasColumnType("int");

                    b.HasKey("ID_Matiere");

                    b.HasIndex("SeanceID_Seance");

                    b.ToTable("Matiere");
                });

            modelBuilder.Entity("gestionabsence.Models.Pointeuse", b =>
                {
                    b.Property<int>("ID_Pointeuse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("EtudiantID_Etudiant")
                        .HasColumnType("int");

                    b.Property<int>("ID_Etudiant")
                        .HasColumnType("int");

                    b.Property<int>("ID_Seance")
                        .HasColumnType("int");

                    b.Property<int?>("seanceID_Seance")
                        .HasColumnType("int");

                    b.HasKey("ID_Pointeuse");

                    b.HasIndex("EtudiantID_Etudiant");

                    b.HasIndex("seanceID_Seance");

                    b.ToTable("Pointeuse");
                });

            modelBuilder.Entity("gestionabsence.Models.Professeur", b =>
                {
                    b.Property<int>("ID_Prefesseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nom_Professeur")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Prenom_Professeur")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("ID_Prefesseur");

                    b.ToTable("Professeur");
                });

            modelBuilder.Entity("gestionabsence.Models.Salle", b =>
                {
                    b.Property<int>("ID_Salle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ID_Prefesseur")
                        .HasColumnType("int");

                    b.Property<string>("Name_Salle")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ProfesseurID_Prefesseur")
                        .HasColumnType("int");

                    b.HasKey("ID_Salle");

                    b.HasIndex("ProfesseurID_Prefesseur");

                    b.ToTable("Salle");
                });

            modelBuilder.Entity("gestionabsence.Models.Seance", b =>
                {
                    b.Property<int>("ID_Seance")
                        .HasColumnType("int");

                    b.Property<int>("ID_salle")
                        .HasColumnType("int");

                    b.Property<int?>("SalleID_Salle")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("ID_Seance");

                    b.HasIndex("SalleID_Salle");

                    b.ToTable("Seance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gestionabsence.Models.Enseigne", b =>
                {
                    b.HasOne("gestionabsence.Models.Professeur", null)
                        .WithMany("List_Enseigne")
                        .HasForeignKey("ID_Prefesseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestionabsence.Models.Seance", "seance")
                        .WithMany("List_Enseigne")
                        .HasForeignKey("ID_Seance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gestionabsence.Models.Etudiant", b =>
                {
                    b.HasOne("gestionabsence.Models.Filiere", "filiere")
                        .WithMany("List_Etudiants")
                        .HasForeignKey("filiereID_Filiere");
                });

            modelBuilder.Entity("gestionabsence.Models.Filiere", b =>
                {
                    b.HasOne("gestionabsence.Models.Professeur", "Professeur")
                        .WithMany()
                        .HasForeignKey("ProfesseurID_Prefesseur");
                });

            modelBuilder.Entity("gestionabsence.Models.Matiere", b =>
                {
                    b.HasOne("gestionabsence.Models.Seance", null)
                        .WithMany("List_matiere")
                        .HasForeignKey("SeanceID_Seance");
                });

            modelBuilder.Entity("gestionabsence.Models.Pointeuse", b =>
                {
                    b.HasOne("gestionabsence.Models.Etudiant", "Etudiant")
                        .WithMany("List_Point")
                        .HasForeignKey("EtudiantID_Etudiant");

                    b.HasOne("gestionabsence.Models.Seance", "seance")
                        .WithMany("List_Point")
                        .HasForeignKey("seanceID_Seance");
                });

            modelBuilder.Entity("gestionabsence.Models.Salle", b =>
                {
                    b.HasOne("gestionabsence.Models.Professeur", "Professeur")
                        .WithMany()
                        .HasForeignKey("ProfesseurID_Prefesseur");
                });

            modelBuilder.Entity("gestionabsence.Models.Seance", b =>
                {
                    b.HasOne("gestionabsence.Models.Salle", "Salle")
                        .WithMany("List_Seance")
                        .HasForeignKey("SalleID_Salle");
                });
#pragma warning restore 612, 618
        }
    }
}
